{"version":3,"sources":["app.coffee","app.min.js","shared.coffee","controllers/game.coffee","controllers/lobby.coffee","services/directives.coffee","services/filters.coffee","services/game-client.coffee"],"names":["app","angular","module","config","$stateProvider","$urlRouterProvider","$urlMatcherFactoryProvider","$locationProvider","$provide","html5Mode","strictMode","otherwise","$injector","$location","invoke","$state","go","state","url","templateUrl","controller","decorator","$delegate","defer","deferred","promise","success","fn","then","error","run","$rootScope","$modalStack","game","$on","dismissAll","call","this","SharedResources","prototype","STATE","SETUP","TEAM_SELECT","TEAM_VOTE","POST_TEAM_VOTE","MISSION","POST_MISSION","INTERMISSION","spyCount","playerCount","Math","ceil","teamSize","mission","table","Error","exports","factory","GamePhaseController","bind","me","apply","arguments","extend","child","parent","ctor","constructor","key","hasProp","__super__","hasOwnProperty","$scope","$timeout","gameClient","players","playerId","intermission","_this","event","isSpy","isLeader","$modal","shared","GamePhaseOneController","superClass","teamFull","votes","open","resolve","Object","keys","length","pickMember","toggleMemberForMission","lockTeam","getTeam","GamePhaseTwoController","modal","keyboard","backdrop","team","map","p","name","result","accept","teamVote","GamePhaseThreeController","voteSuccess","lastVoteResult","GamePhaseFourController","onMission","isOnMission","missionReport","GamePhaseFiveController","$modalInstance","IntroModalController","close","dismiss","VoteModalController","reject","MissionModalController","fail","$log","LobbyController","changeName","toggleReady","ref","ready","ref1","oldName","newName","ChangeNameController","cancel","directive","restrict","transclude","replace","scope","template","link","updateVote","getRange","n","results","i","push","lastVote","roundWins","$element","$attrs","$transclude","innerScope","minErr","startingTag","$new","clone","empty","append","on","$destroy","filter","input","isObject","$window","GameClient","playersUpdated","setupLobby","handleStateChange","io","toLowerCase","console","log","$broadcast","arg","vote","id","player","leader","wins","delta","value","len","emit","role"],"mappings":"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","file":"app.min.js","sourcesContent":["app = angular.module('resist', ['ui.router', 'ui.bootstrap']).config [\n  '$stateProvider', '$urlRouterProvider', '$urlMatcherFactoryProvider', '$locationProvider', '$provide',\n  ($stateProvider,   $urlRouterProvider,   $urlMatcherFactoryProvider,   $locationProvider,   $provide) ->\n    # Turn on HTML5 url mode\n    $locationProvider.html5Mode true\n\n    # Allow matching with slashes at the end of a URL\n    $urlMatcherFactoryProvider.strictMode false\n\n    # 404 on missing pages\n    $urlRouterProvider.otherwise ($injector, $location) ->\n      $injector.invoke [\n        '$state',\n        ($state) -> $state.go '404'\n      ]\n\n    # Set up our states/routes\n    $stateProvider\n      # Lobby\n      .state 'lobby',\n        url:         '^/'\n        templateUrl: 'lobby.html'\n        controller:  'LobbyController as lobby'\n\n      # Game - Phase one\n      .state 'game-team-select',\n        templateUrl: 'game-1.html'\n        controller:  'GamePhaseOneController as game'\n\n      # Game - Phase two\n      .state 'game-team-vote',\n        templateUrl: 'game-2.html'\n        controller:  'GamePhaseTwoController as game'\n\n      # Game - Phase three\n      .state 'game-post-team-vote',\n        templateUrl: 'game-3.html'\n        controller:  'GamePhaseThreeController as game'\n\n      # Game - Phase four\n      .state 'game-mission',\n        templateUrl: 'game-4.html'\n        controller:  'GamePhaseFourController as game'\n\n      # Game - Phase five\n      .state 'game-post-mission',\n        templateUrl: 'game-5.html'\n        controller:  'GamePhaseFiveController as game'\n\n    # Adds the 'success' and 'error' convenience methods that the $http promises have\n    $provide.decorator '$q', [\n      '$delegate',\n      ($delegate) ->\n        defer = $delegate.defer\n\n        $delegate.defer = ->\n          deferred = defer()\n\n          deferred.promise.success = (fn) ->\n            deferred.promise.then fn\n            return deferred.promise\n\n          deferred.promise.error = (fn) ->\n            deferred.promise.then null, fn\n            return deferred.promise\n\n          return deferred\n\n        return $delegate\n    ]\n]\n\napp.run [\n  '$rootScope', '$state', '$modalStack', 'GameClient',\n  ($rootScope,   $state,   $modalStack,   game) ->\n\n    # Look for state changes to close out our modals\n    $rootScope.$on '$stateChangeStart', ->\n      $modalStack.dismissAll()\n]",null,"# Resources used by both the server and client\nclass SharedResources\n  STATE:\n    SETUP:          'setup'\n    TEAM_SELECT:    'team select'\n    TEAM_VOTE:      'team vote'\n    POST_TEAM_VOTE: 'post team vote'\n    MISSION:        'mission'\n    POST_MISSION:   'post mission'\n\n  # Time that post rounds should last\n  INTERMISSION: 10000\n\n  # The number of spies a game should have given the player count\n  spyCount: (playerCount) -> Math.ceil(playerCount / 3)\n\n  # The number of team members this mission should have\n  teamSize: (playerCount, mission) ->\n    throw Error('Player count must be between 5 and 10, inclusive') if playerCount < 5 || playerCount > 10\n    throw Error('Invalid mission number') if mission < 1 || mission > 5\n\n    # From Wikipedia: https://en.wikipedia.org/wiki/The_Resistance_(game)#Rounds\n    table = [\n      [2, 2, 2, 3, 3, 3]\n      [3, 3, 3, 4, 4, 4]\n      [2, 4, 3, 4, 4, 4]\n      [3, 3, 4, 5, 5, 5]\n      [3, 4, 4, 5, 5, 5]\n    ]\n\n    table[mission - 1][playerCount - 5]\n\n# Export this as an Angular or Node.js object\nif typeof module isnt 'undefined' && module.exports\n  module.exports = new SharedResources\nelse\n  angular.module('resist').factory 'SharedResources', -> new SharedResources\n","app = angular.module 'resist'\n\nclass GamePhaseController\n  constructor: ($state, $scope, $timeout, gameClient) ->\n    # Make sure we have a game going before we do anything\n    if !gameClient.players || !gameClient.playerId\n      $state.go 'lobby'\n\n    # Attach stuff game controllers usually need\n    @playerId     = gameClient.playerId\n    @players      = gameClient.players\n    @mission      = gameClient.mission\n    @intermission = gameClient.intermission()\n\n    # Listen for player changes\n    $scope.$on 'players.change', (event, players) => $timeout =>\n      @players = players\n\n    # Register some helper functions\n    @isSpy = -> gameClient.isSpy()\n    @isLeader = -> gameClient.isLeader()\n\n# Phase one - The team building phase\napp.controller 'GamePhaseOneController', [\n  '$state', '$scope', '$timeout', '$modal', 'GameClient', 'SharedResources',\n  ($state,   $scope,   $timeout,   $modal,   gameClient,   shared) -> new class GamePhaseOneController extends GamePhaseController\n    constructor: ->\n      super $state, $scope, $timeout, gameClient\n\n      # Show the intro modal on the first vote of the first mission\n      if @mission is 1 && gameClient.votes is 0\n        $modal.open\n          templateUrl: 'modals/intro.html'\n          controller:  'IntroModalController as modal'\n          resolve:\n            isSpy:    => @isSpy()\n            spyCount: => shared.spyCount Object.keys(@players).length\n\n    # Picks a member to go on the next mission\n    pickMember: (playerId) -> gameClient.toggleMemberForMission playerId\n\n    # Locks the current mission team\n    lockTeam: -> gameClient.lockTeam()\n\n    # Calculates the current mission team size\n    teamSize: -> gameClient.teamSize()\n\n    # The current mission team\n    getTeam: -> gameClient.getTeam()\n\n    # Whether or not the mission team has enough players\n    teamFull: => @getTeam().length is @teamSize()\n]\n\n# Phase two - Time to vote on this team comp!\napp.controller 'GamePhaseTwoController', [\n  '$state', '$scope', '$timeout', '$modal', 'GameClient',\n  ($state,   $scope,   $timeout,   $modal,   gameClient) -> new class GamePhaseTwoController extends GamePhaseController\n    constructor: ->\n      super $state, $scope, $timeout, gameClient\n\n      # Vote on this team\n      modal = $modal.open\n        templateUrl: 'modals/vote.html'\n        controller:  'VoteModalController as modal'\n        keyboard:    false\n        backdrop:    'static'\n        resolve:\n          team: -> gameClient.getTeam().map (p) -> p.name\n      modal.result.then (accept) =>\n        gameClient.teamVote accept\n      , =>\n        gameClient.teamVote false\n]\n\n# Phase three - Shows the players the outcome of the vote\napp.controller 'GamePhaseThreeController', [\n  '$state', '$scope', '$timeout', 'GameClient',\n  ($state,   $scope,   $timeout,   gameClient) -> new class GamePhaseThreeController extends GamePhaseController\n    constructor: ->\n      super $state, $scope, $timeout, gameClient\n\n      @voteSuccess = gameClient.lastVoteResult\n\n      $scope.$on 'vote.result', (event, result) => $timeout =>\n        @voteSuccess = result\n]\n\n# Phase four - The mission members vote on whether or not the mission succeeds\napp.controller 'GamePhaseFourController', [\n  '$state', '$scope', '$timeout', '$modal', 'GameClient',\n  ($state,   $scope,   $timeout,   $modal,   gameClient) -> new class GamePhaseFourController extends GamePhaseController\n    constructor: ->\n      super $state, $scope, $timeout, gameClient\n\n      @onMission = gameClient.isOnMission()\n      if @onMission\n        modal = $modal.open\n          templateUrl: 'modals/mission.html'\n          controller:  'MissionModalController as modal'\n          keyboard:    false\n          backdrop:    'static'\n          resolve:\n            isSpy: -> gameClient.isSpy()\n        modal.result.then (accept) =>\n          gameClient.missionReport accept\n        , =>\n          gameClient.missionReport true\n]\n\n# Phase five - Shows the players the outcome of the mission\napp.controller 'GamePhaseFiveController', [\n  '$state', '$scope', '$timeout', 'GameClient',\n  ($state,   $scope,   $timeout,   gameClient) -> new class GamePhaseFiveController extends GamePhaseController\n    constructor: ->\n      super $state, $scope, $timeout, gameClient\n]\n\napp.controller 'IntroModalController', [\n  '$modalInstance', '$scope', 'isSpy', 'spyCount',\n  ($modalInstance,   $scope,   isSpy,   spyCount) -> new class IntroModalController\n    constructor: ->\n      $scope.isSpy = isSpy\n      $scope.spyCount = spyCount\n\n    close: ->\n      $modalInstance.dismiss 'cancel'\n]\n\napp.controller 'VoteModalController', [\n  '$modalInstance', 'team',\n  ($modalInstance,   team) -> new class VoteModalController\n    constructor: -> @team = team\n\n    accept: -> $modalInstance.close true\n    reject: -> $modalInstance.close false\n]\n\napp.controller 'MissionModalController', [\n  '$modalInstance', 'isSpy',\n  ($modalInstance,   isSpy) -> new class MissionModalController\n    constructor: -> @isSpy = isSpy\n\n    success: -> $modalInstance.close true\n    fail: -> $modalInstance.close false\n]\n\n","angular.module('resist').controller 'LobbyController', [\n  '$state', '$log', '$scope', '$timeout', '$modal', 'GameClient',\n  ($state,   $log,   $scope,   $timeout,   $modal,   game) -> new class LobbyController\n    constructor: ->\n      @playerId = game.playerId\n      @players = game.players\n      @ready = if @players then @players[@playerId]?.ready else false\n\n      $scope.$on 'connected', (event, playerId) =>\n        $timeout => @playerId = playerId\n\n      $scope.$on 'players.change', (event, players) =>\n        $timeout =>\n          @players = players\n          @ready = @players[@playerId]?.ready\n\n    toggleReady: =>\n      game.toggleReady()\n      @ready = @players[@playerId]?.ready\n\n    changeName: =>\n      $modal.open\n        templateUrl: 'changeNameModal'\n        controller:  'ChangeNameController as modal'\n        resolve:\n          oldName: => @players[@playerId]?.name\n      .result.then (newName) ->\n        game.changeName newName\n]\n\nangular.module('resist').controller 'ChangeNameController', [\n  '$modalInstance', 'oldName',\n  ($modalInstance,   oldName) -> new class ChangeNameController\n    constructor: ->\n      @name = oldName\n\n    changeName: =>\n      $modalInstance.close @name\n\n    cancel: ->\n      $modalInstance.dismiss 'cancel'\n]\n","app = angular.module('resist')\n\napp.directive 'playerTable', ->\n  restrict:   'E'\n  transclude: true\n  replace:    true\n  scope:      true\n  template: \"\"\"\n<table class=\"table table-striped\">\n  <thead>\n    <tr>\n      <th colspan=\"2\">Players</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat=\"player in game.players\">\n      <td>\n        <i class=\"fa fa-fw\" ng-class=\"{'fa-user': player.role === 'resistance', 'fa-user-secret': player.role === 'spy'}\"></i>\n        {{ player.name }}\n        <span class=\"text-muted\" ng-if=\"player.id === game.playerId\">(You)</span>\n        <i class=\"fa fa-fw\" ng-class=\"{'fa-star': player.leader}\"></i>\n      </td>\n      <td>\n        <div inject></div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\"\"\"\n\napp.directive 'scoreBoard', [\n  'GameClient',\n  (gameClient) ->\n    restrict: 'E'\n    scope:    false\n    link: ($scope) ->\n      $scope.getRange = (n) -> [1..n]\n\n      # Accept vote changes\n      updateVote = ->\n        $scope.votes = gameClient.votes\n        $scope.lastVote = gameClient.lastVoteResult\n      $scope.$on 'vote.result', updateVote\n      updateVote()\n\n      $scope.roundWins = gameClient.roundWins\n\n    template: \"\"\"\n<table class=\"table table-striped\">\n  <thead>\n    <tr>\n      <th></th>\n      <th ng-repeat=\"i in getRange(5)\" class=\"text-center\">{{ i }}</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Votes</th>\n      <td ng-repeat=\"i in getRange(5)\" class=\"text-center\">\n        <i class=\"fa fa-fw\" ng-class=\"{'fa-times-circle text-danger': i < votes || i === votes && !lastVote, 'fa-check-circle text-success': i === votes && lastVote}\"></i>\n      </td>\n    </tr>\n    <tr>\n      <th>Mission</th>\n      <td ng-repeat=\"i in getRange(5)\" class=\"text-center\">\n        <i class=\"fa fa-fw\" ng-class=\"{'fa-rebel text-success': roundWins[i] === 'resistance', 'fa-empire text-danger': roundWins[i] === 'spy'}\"></i>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\"\"\"\n]\n\n# Helps with transclude not acting like I want it to\n# Source: https://github.com/angular/angular.js/issues/7874#issuecomment-47647528\napp.directive 'inject', ->\n    link: ($scope, $element, $attrs, controller, $transclude) ->\n      if !$transclude\n        throw minErr('ngTransclude')('orphan',\n          'Illegal use of ngTransclude directive in the template! ' +\n          'No parent directive that requires a transclusion found. ' +\n          'Element: {0}',\n          startingTag($element)\n        )\n\n      innerScope = $scope.$new()\n      $transclude innerScope, (clone) ->\n        $element.empty()\n        $element.append(clone)\n        $element.on '$destroy', ->\n          innerScope.$destroy()\n","app = angular.module('resist')\n\n# Filter for displaying the \"length\" of an object\napp.filter 'objLength', -> (input) ->\n  return 0 if !angular.isObject(input)\n\n  Object.keys(input).length\n","angular.module('resist').factory 'GameClient', [\n  '$state', '$window', '$rootScope', 'SharedResources',\n  ($state,   $window,   $rootScope,   shared) -> new class GameClient\n    io = null\n\n    constructor: ->\n      # Set up the connection to the web socket server\n      io = $window.io()\n\n      # Maintain a list of players and ourself\n      @playerId = null\n      @players = null\n      @state = shared.STATE.SETUP\n      @mission = 1\n      @votes = 0\n      @lastVoteResult = null\n      @roundWins = []\n\n      @setupLobby()\n\n      # Listen for changes to game mode\n      handleStateChange = (state) =>\n        @state = state\n        $state.go 'game-' + state.replace(/ /g, '-').toLowerCase()\n        console.log \"Game is changing states: #{state}\"\n\n      io.on 'game/start', handleStateChange\n      io.on 'game/state', handleStateChange\n\n      io.on 'game/vote-result', (result) =>\n        @votes++\n        @lastVoteResult = result\n        $rootScope.$broadcast 'vote.result', result\n\n      io.on 'game/mission-vote', ({mission, vote}) =>\n        @mission = mission\n        @votes = vote\n\n      # Listen for leadership changes\n      io.on 'player/new-leader', (playerId) =>\n        for id, player of @players\n          player.leader = id is playerId\n        @playersUpdated()\n\n      # Accept updates to the scores\n      io.on 'game/score', (wins) =>\n        @roundWins = wins\n\n      # Listen for changes to player data\n      io.on 'player/patch', ({playerId, delta}) =>\n        if @players[playerId]\n          p = @players[playerId]\n          console.log \"Incoming patch for #{p.name}:\"\n          console.log delta\n\n        @players[playerId] = {} if not @players[playerId]\n        for key, value of delta\n          @players[playerId][key] = value\n        @playersUpdated()\n\n\n    # Sets up lobby listeners and other things\n    setupLobby: =>\n      # Listen for our connection\n      io.on 'lobby/connected', ({player, players}) =>\n        @playerId = player\n        @players = {}\n        for p in players\n          @players[p.id] = p\n        $rootScope.$broadcast 'connected', player\n        @playersUpdated()\n      io.on 'reconnect', -> $state.go 'lobby'\n\n      io.on 'lobby/leave', (playerId) =>\n        delete @players[playerId]\n        @playersUpdated()\n\n    # Tells the world that the player list has changed in some way\n    playersUpdated: =>\n      $rootScope.$broadcast 'players.change', @players\n\n    # Tell the server we want to change our name\n    changeName: (name) ->\n      io.emit 'lobby/change-name', name\n\n    # Toggle this player's ready state\n    toggleReady: =>\n      io.emit 'lobby/ready'\n      @players[@playerId].ready = !@players[@playerId].ready\n      @playersUpdated()\n\n    # Tell the server about a team selection\n    toggleMemberForMission: (playerId) =>\n      return if !@isLeader()\n\n      io.emit 'game/pick-member', playerId\n      @players[playerId].onMission = !@players[playerId].onMission\n      @playersUpdated()\n\n    # Send the lock team event to the server\n    lockTeam: =>\n      return if !@isLeader()\n\n      io.emit 'game/lock-mission'\n\n    # Tell the server our vote\n    teamVote: (accept) =>\n      @players[@playerId].vote = if accept then 'accept' else 'reject'\n      io.emit 'game/team-vote', accept\n\n    # Tell the server what we did during the mission\n    missionReport: (success) =>\n      return if !@isOnMission()\n      io.emit 'game/mission-report', success\n\n    # Whether or not this player is a spy\n    isSpy: => @players[@playerId]?.role is 'spy'\n\n    # Whether or not this player is the current leader\n    isLeader: => !!@players[@playerId]?.leader\n\n    # Whether or not this player is on the mission\n    isOnMission: => !!@players[@playerId]?.onMission\n\n    # The team size this mission needs\n    teamSize: => shared.teamSize Object.keys(@players).length, @mission\n\n    # The number of seconds the intermission will last\n    intermission: -> shared.INTERMISSION / 1000\n\n    # The current team\n    getTeam: =>\n      team = []\n      for id, player of @players\n        team.push(player) if player.onMission\n      team\n]\n"],"sourceRoot":"/source/"}